{% extends 'base.html.twig' %}

{% block title %}Klettergebiete um München{% endblock %}

{% block body %}



		<div 
			class="container pb-2" 
			style="padding-top: 60px;"
		>

			<div id="main" class="mt-3">
				<div class="bg-white p-3 mb-4 flex items-center justify-between shadow">
					<h1 class="tracking-wide w-full">Klettergebiete um München</h1>
				</div>
			</div>

					<div class="grid grid-cols-3 gap-4">
						<div class="col-span-3 md:col-span-2">
							{% for area in areas %}
								<a 
									class="hover:bg-gray-100 block w-full bg-white shadow rounded mb-4 mr-2 p-2"
									href="{{ path('show_rocks', { slug: area.slug }) }}" 
									title="Klettergebiet {{ area.name }}"
									data-area="{{ area.name }}"
								> 

									<div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
										<div>
											
											{% if area.image %}
												<img
													class="lazy"  
													src="{{ asset('build/images/areas/' ~ area.image ~ '.jpg') }}"
													data-src=""
													alt="Übersicht Klettergebiete {{ area.name }}" 
												/>
											{% else %}
												<svg class="w-10 h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
													<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
												</svg>
											{% endif %}
											
										</div>
										<div>
									
											<h2 class="mb-3">{{ area.name }}</h2>

											<hr class="my-1" />

											<div class="flex items-center">
												<p class="paragraph mb-0 mr-3">Felsen</p>
												<span class="badgetailwind">{{ area.rocks|length }}</span>
											</div>

											<hr class="my-1" />

											<div class="flex items-center">
												<p class="paragraph mb-0 mr-3">Touren</p>
												<span class="badgetailwind">{{ area.routes|length }}</span>
											</div>

											{#{dump(area)}#}

											<hr class="my-2" />
										
											<div class="flex flex-row justify-between">

												<div class="d-flex flex-col">
													<div class="text-center bg-green-700 px-2 py-1 md:text-xs text-sm text-white">1 - 5</div>
												</div>

												<div class="d-flex flex-col">
													<div class="text-center bg-sky-700 px-2 py-1 md:text-xs text-sm text-white">6 - 7</div>
														
												</div>

												<div class="d-flex flex-col">
													<div class="text-center bg-red-700 px-2 py-1 md:text-xs text-sm text-white">8 - 11</div>
														
												</div>

												<div class="d-flex flex-col">
													<div class="text-center bg-black px-2 py-1 md:text-xs text-sm text-white">Proj.</div>
														
												</div>
{#}
foreach ($online as $key) {
								$prozent 	= 100/$routes->amountRoutesArea($key['areaId']);
								$easy 		= $prozent * $routes->getRoutesGrade($key['areaId'], 0, 15);
								$middle 	= $prozent * $routes->getRoutesGrade($key['areaId'], 15, 29);
								$hard 		= $prozent * $routes->getRoutesGrade($key['areaId'], 29, 60);
								$project 	= $prozent * $routes->projects($key['areaId']);

								$grading = array(
													'easy' 		=> array("green", "1 - 5", $easy, 0, 15),
													'middle' 	=> array("blue", "6 - 7", $middle, 15, 29),
													'hard' 		=> array("red", "8 - 11", $hard, 29, 60),
													'project' 	=> array("black", "Proj.", $project),
												);
												foreach($grading as $i => $value) {

#}
													{#% set prozent = 100/area.routes|length %#}
													

{#{ prozent }#}

												{#% for route in area.routes %}



													<div class="d-flex flex-col">
														<div class="text-center bg- px-2 py-1 md:text-xs text-sm text-white"></div>
														<div class="text-center md:text-xs text-sm text-white bg-gray-400 mt-1">
															<div class="bg- px-2 py-1" style="width: %">
															</div>
														</div>	
													</div>
												{% endfor %#}
											</div>
										</div>
									</div>
								</a>

								

								

							{% endfor %}
						</div>
						<div class="col-span-3 md:col-span-1">
							<div class="accordion" id="accordionExample">
								<div class="accordion-item">
								  <h2 class="accordion-header" id="headingOne">
									<button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
									  Accordion Item #1
									</button>
								  </h2>
								  <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
									<div class="accordion-body">
									  <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
									</div>
								  </div>
								</div>
								<div class="accordion-item">
								  <h2 class="accordion-header" id="headingTwo">
									<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
									  Accordion Item #2
									</button>
								  </h2>
								  <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
									<div class="accordion-body">
									  <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
									</div>
								  </div>
								</div>
								<div class="accordion-item">
								  <h2 class="accordion-header" id="headingThree">
									<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
									  Accordion Item #3
									</button>
								  </h2>
								  <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
									<div class="accordion-body">
									  <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
									</div>
								  </div>
								</div>
							  </div>



							  
						</div>
					</div>
				</div>
			</div>
			
		</div>

		{{ include('pageParts/footer.html.twig') }}


        <div 
            id="back_to_top_button" 
            class="fixed border-solid border-white border outline-none bg-sky-800 shadow-xl cursor-pointer p-2 rounded-lg" 
            style="display: none; bottom: 20px; right: 30px; z-index: 99;"
        ><svg class="stroke-current text-white h-8 w-8" stroke-linecap="round" stroke-linejoin="round" stroke-width="1" fill="none" viewBox="0 0 24 24"><path d="M5 15l7-7 7 7"></path></svg></div>




        {% block javascripts %}
			{{ encore_entry_script_tags('app') }}
            {{ encore_entry_script_tags('frontend') }}
            
        {% endblock %}
	
{% endblock %}

